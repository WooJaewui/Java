
 2일차 - 14~17강.



 # 중간코드, 컴파일러 인터프리터.

WORA Write Once Run Anywhere.
한번 작성한 코드가 아무장소에서나 실행되어야한다.

WORA가 힘든이유.
CPU가 다른 경우 : CPU마다 서로 다른 기계언어 방식을 가진다. ( 호환이 안됨 )
API : 이후에 배움.

인터프리터.
블럭 단위로 번역 후 바로 CPU가 해석가능하게 실행한다. ( 중간 결과물이 없다 )
수행 성능이 느리다, 소스 코드를 다 볼 수 있다.

C언어 컴파일러.
형태소분석 -> 구문분석 -> 의미분석 -> 중간코드 -> 최적화 -> 물리코드.
자바에 비해 실행속도가 훨씬 빠르다.

자바 컴파일러. ( C#도 비슷 )
형태소분석 -> 구문분석 -> 의미분석 -> 중간코드 ( 1byte 단위로 코드를 남긴다 )




 # 자바 컴파일과 관련된 용어.

어셈블.
장치명령어.
장치가 가지고 있는 기능. ( MOV AX, 3 )

JDK Java Development Kit.
Compiler, Debuger.

JRE Java Runtime Environment.
JIT Compiler, Garbage Collector, Security, Loader.

JIT Just in Time Compiler.
인터프리터.



 # 함수의 능력과 API의 의미.

입출력 장치를 위한 인터페이스의 필요성.
입출력 장치들은 컴퓨터에 종속되어 있지 않고, 매번 다른 기기를 사용할수도 있다.

함수의 장점.
코드 은닉화 : 함수 내부의 코드를 숨길 수 있다.
코드 파편화 : 전체 코드의 일부분을 분리해서 만들 수 있다.
코드 집중화 : 코드 수정이 쉽다.

Driver.
장치가 달라질때마다 함수의 이름은 같지만 함수의 내용이 달라지는 역할을 하는 것을 의미.

API.
하드웨어와 장치를 연결해주는 역할을 하는 함수.



 # WORA를 위한 자바 플랫폼의 특징.

WORA 문제점.
OS에 따라 함수이름이 달라서 중간에서 OS에 따라 함수를 실행시켜주는 플랫폼이 필요하다.

Java Platform.
WORA를 위해 자바에서 OS에 따른 함수이름을 실행할 수 있도록 도와주는 플랫폼이다.
자바 플랫폼과 운영체제를 연결하는 API가 필요하다.







