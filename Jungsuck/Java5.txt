# 배열의 출력.

int[] arr = {100, 95, 80, 70, 60};
char[] char_arr = {'a','b'}

System.out.println(arr);		// I@14318bb와 같은 형식의 문자열 오류가 발생한다.
System.out.println(char_arr);   // 'a', 'b'가 출력된다. char형식의 배열은 출력된다.

ex) System.out.println(Array.toString(arr));  	arr배열을 string으로 바꿔줘서 출력한다.
												"[100,95,80,70,60]" 


# 배열의 활용.

 총 합과 평균을 구하는 방법.

int sum = 0;
float average = 0f;

int[] score = {100,80,60,100,90};

for(int i=0; i<score.length; i++){
	sum += score[i];
}

average = sum/(float)score.length;       소수값까지 정확히 계산하기 위해 float값으로 바꿔준다.

 최대값 최소값 구하는 방법.
 
int[] score = {100,80,60,100,90};

max = score[0];
min = score[0];

for(int i=1; i<score.length; i++){	     max, min의 값에 score[0]의 값을 대입해서 i=1부터 시작.
	if(score[i]>max){
		max = score[i]
	} else if(score[i]<min){
		min = score[i]
	} 
}

 배열의 값을 랜덤으로 섞어주는 방법.
 
int[] arr = {0,1,2,3,4,5};

for(int i=0; i<arr.length; i++){		조건식의 값을 너무 적게하면 랜덤하게 섞이지 않는다.
	int r = (int)(Math.random()*6);		0<=Math.Random<1
	int init = arr[i];					두 변수의 값을 바꿔주는 방법.
	arr[i] = arr[r];					3개의 변수가 필요하다.
	arr[r] = init;
}


# String배열의 선언과 생성.

배열의 선언.

String[] name = new String[3];

배열의 생성.

String[] name = {"kim", "Park", "Yi"};
String[] name = new String[]{"kim", "Park", "Yi"}

참조형의 자세한 설명.

name[0]의 주소에 "kim"이라는 다른 메모리에 있는 data를 불러서 저장(참조)하는 것이다.(참조형)


# data type의 기본값.

boolean   				flase
char					'\u0000'
byte,short,int			0
long					0L
float					0.0f
double					0.0d 또는 0.0
참조형(string)			null


# 커맨드 라인을 통해 입력받기.

class를 만들때 자동으로 적히는 이 부분에 args string 배열에 
cmd에서 java className str1 str2를 입력하면 args[0] = str1, args[1] = str2로 대입된다.

ex)
public class test8 {

	public static void main(String[] args) {
	
cmd
java className str1 str2 ... 일때,
str과 str2에 아무것도 안적으면 배열길이가 0인 배열이 생성된다.

cmd를 입력하는 방법.

Run => Run configurations => Arguments => Program arguments에 str1, str2 부분만 적는다.
cmd => 이클립스에서 alt+enter (현재 작업하는 file에 dir위치를 보여줌) 
=> cd class가 저장되있는 path => java className str1, str2...

cmd type file_name  		파일의 내용을 다 보여준다.


# n차원 배열.

2차원배열		table형태의 data를 저장하기 위한 배열.
			1차원배열이 여러개 모인것이다. (1차원 배열의 배열)

3차원배열		2차원배열이 여러개 모인것. (2차원 배열의 배열)

4차원 이상도 있지만, 3차원까지만 거의 사용된다.


# 2차원 배열.

int[][] score = new int[4][3];		앞에[]가 행이고, 뒤에[]가 열이다.

ex)	a a a 			score[0][0]	score[0][1]	score[0][2]
	a a a 			score[1][0]	score[1][1] score[1][2]
	a a a 			score[2][0] score[2][1] score[2][2]
	a a a 			score[3][0] score[3][1] score[3][2]

score[0][0] = 100;					배열 score의 1행 1열에 100을 저장.
System.out.printlnf(score[0][0])	100;

 2차원 배열의 생성과 초기화를 동시헤 하는 방법.
 
int[][] arr = new int[][]{{1,2,3},{4,5,6}};
int[][] arr = {
				{1,2,3},
				{4,5,6}
			}

ex) 1 2 3			arr[0][0] = 1	arr[0][1] = 2	arr[0][2] = 3	score[0]의 배열.
    4 5 6 			arr[1][0] = 4 	arr[1][1] = 5   arr[1][2] = 6	score[1]의 배열.
    

# 2차원 배열의 수 확인.

int[][] score = {
		{100,100,100},
		{20,20},
		{10}
}

int sum = 0;

for (int i=0; i < score.length; i++){			score.length	= 2차배열의 행의 수.
	for(int k=0; k<score[i].length; k++){		score[i].length = 2차배열의 열의 수.
	
		System.out.printlnt(score[i][k]);		배열의 모든수 확인.
		
		sum += score[i][k];						배열의 모든수의 합.
	
	}

}


# String 클래스.

String클래스  	char[] + 메서드기능.
				서로 관련이 있어서 묶어줘서 여러개의 문자형을 한 번에 사용할 수 있게되었다.
				내용을 변경할 수 없다.(read only)
				ex) String a = "a";   String b = "b";
					a = a + b;
					"ab"		
					메모리상에서는 string으로 변수화 했을시,
					"a"와 "b"가 존재하고 "a"+"b"하면 직접더해지는 것이 아니라
					"ab"라는 새로운 메모리가 생성된다.
					

# String의 주요 메서드.

str.charAt(index);		문자열 string의 index번째 문자를 알려준다.
str.length();			문자열의 길이를 알려준다.
str.substring(1,4)		1에서 4-1까지의 숫자를 알려준다.
						앞에 값만 쓰면 앞에 값 ~ 끝까지 숫자를 알려준다.
str.equals(value);		string과 value같이 같은지 확인.
str.toCharArray();		string을 char로 type을 변경해준다.


# Arrays클래스.

Arrays클래스 		배열과 관련된 class.

Arrays.toString(arr);				배열에 저장되어 있는 element를 문자로 바꿔줌. "[0,1,2,3]"	
Arrays.deepToString(arr);			2차원 이상일때 element를 문자로 바꿔줌. "[[11,12],[21,22]]"

Arrays.equals(arr1[i], arr2[i]);		arr1[i]==arr2[i] 값을 비교해서 boolean 결과값을 갖는다.
Arrays.deepEquals(arr1[i], arr2[i]);	2차원 이상일때 element값을 비교해서 boolean 결과값을 갖는다.

Arrays.copyOf(arr, arr.length);			arr은 복사할 배열의이름. 
										arr.length 배열할 복사에서 몇개를 복사할 것인지 결정한다.
										arr.length보다 더 큰 값을 넣으면 빈 자리에 0이 들어간다.
Arrays.copyRange(arr,2,5);				arr의 2부터 5-1까지 복사한다.

Arrays.sort(arr);						배열의 element를 오름차순 정렬해준다.


# 객체지향언어.

OOP Object Oriented Programing

객체지향언어	프로그래밍언어 + 객체지향개념(규칙)
			소프트웨어가 빠른 시대의 변화를 쫓아가지 못했다.
			절차적방식(순서대로실행)에서 객체지향방식을 도입하기 시작했다.
			코드의 재사용성이 높고 유지보수가 용이. 중복 코드제거.
			
			
# 객체지향언어의 핵심개념. 6~7장에서 계속 배운다.

1. 캡슐화
2. 상속
3. 추상화
4. 다형성


# 객체지향언어의 공부방법.

6장~7장 다형성까지 계속 반복해서 이해하고
나머지 추상화 등 다른 개념들을 공부한다.  		
다형성을 이해하지 못하면 다른 개념을 이해할 수 없다.
Java기초(개념) => Java정석 3편(개념) => JSP,Spring,안드로이드,apple(실전경험)














