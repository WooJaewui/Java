# 쓰레드.

싱글쓰레드		한 번에 1개 작업을 하는 것. (지금까지 작업한 모든 것)
멀티쓰레드		한 번에 n개의 작업을 하는 것. (요즘 대부분의 모든 프로그램은 멀티쓰레드이다)
			data를 공유하기 때문에 문제가 발생할 수 있다.


# StringBuilder class.

StringBuilder 	StringBuffer와 거의 똑같다.
				다른점 1가지 StringBuffer는 동기화되어 있다. (멀티 쓰레드에 안전하다)
				멀티 쓰레드 프로그램이 아닌 경우, 동기화는 불필요한 성능저하이다.
				싱글 쓰레드에서는 StringBuilder를 사용하자.


# Math class.

Math		수학관련 static 메소드의 집합. (따로 인스턴스를 만들지 않아도 된다)
			PI 			원주율.
			E			자연로그. log e
			ceil()		올림. (음수일때 조심)
			floor()		버림. (음수일때 조심)
			abs()		절대값 반환.
			max()		같은 type중에 큰 값을 반환한다.
			min()		같은 type중에 작은 값을 반환한다.
			rint()		짝수반올림. ex) 1.5 = 2, 2.5 = 2 ... (round even)
			round()		반올림하기. (소수점 첫자리에서 반올림한다)
			random()	랜덤값 구할때 사용.   0 <= x < 1;			
			

# 래퍼 wrapper 클래스.
				
wrapper		8개의 기본형을 객체로 다뤄야할 때 사용하는 클래스. (객체가 아님)
			기본형 type에 1:1로 하나씩 존재한다.
			char => Character, int => Integer, 나머지는 첫글자를 대문자로 바꾸면 됨.
			
Integer		compareTo()		같으면 = 0, 오른쪽이 작으면 = 음수, 오른쪽이 크면 = 양수
			equals()		같으면 = true, 다르면 = false.
			Max_VALUE		20억.
			

# Number 클래스.

Number 		모든 숫자 래퍼 클래스의 조상. ex) Byte, Short, Biginteger, BigDecimal, ...
			추상클래스이다. 
			래퍼객체를 기본형으로 바꿔주는 메소드들을 가지고 있다.
			intValue()  	data를 int로 바꿔준다.


# 문자열과 숫자 형변환.

문자열 => 숫자.

1. int i = new Integer("100").intValue();
2. int i2 = Integer.parseInt("100");
3. Integer i3 = Integer.valueOf("100") = int i3와 같다. (오토박싱)

숫자 => 문자열.

String str = type.toString();

n진법의 문자열을 숫자로 변환하는 방법.

int i = Integer.parseInt("100", 2);				4
int i2 = Integer.parseInt("100", 8);			64
int i3 = Integer.parseInt("100", 16);			256
int i4 = Integer.parseInt("ff", 16);			255


# 오토박싱 & 언박싱.

컴파일러가 해주는 것이다.

오토박싱		기본형 => 래퍼클래스로 자동으로 바꿔주는 것. (JDK 1.5)
			JDK1.5 이전에는 기본형과 참조형간의 연산이 불가능했다.
			ex) Integer = 10; 	이런형식도 가능하다.
			
언박싱		래퍼클래스 => 기본형으로 자동으로 바꿔주는 것. (JDK 1.5)

ArrayList<Integer>		객체만 저장하는 배열이다.
						int값을 넣어도 오토박싱에 의해서 Integer객체로 자동으로 바껴서 들어간다.
						

# 날짜와 시간.

java.util.Date			날짜와 시간을 다룰 목적으로 만들어진 클래스. (JDK 1.0)
						Date의 메소드는 거의 deprecated(앞으로 쓰지마라)되었지만, 여전히 쓰이고 있다.
					
java.util.Calendar		Date클래스를 개선한 새로운 클래스. (JDK 1.1)
						여전히 단점이 존재했다. (날짜와 시간을 같이 다룬다)
						
java.time패키지			Date와 Calendar의 단점을 개선한 새로운 클래스들을 제공. (JDK 1.8)
						LocalDate	 	: 	날짜.
						LocalTime		: 	시간.
						LocalDateTime 	: 날짜 + 시간.
						

# Calendar 클래스.

Calendar	추상클래스이므로 getInstance()를 통해 구현된 객체를 얻어야 한다.
			ex) Calendar cal = Calendar.getInstance();	Gregorian(서양력)
			
			getActualMaximum()	그 달에 마지막날짜를 알려준다.
			
			get()				날짜와 시간 필드 가져오기.
								ex) Calendar cal = Calendar.getInstance();
									int i = cal.get(Calendar.YEAR);
									
								YEAR에 들어갈 수 있는 필드들.
								날짜관련.
								MONTH			월.(0부터 시작 + 1해줘야된다)
								DATE			일.
								WEEK_OF_YEAR	1월1일 ~지금.
								WEEK_OF_MONTH	그 달의 몇 번째 주.
								DAY_OF_MONTH	그 달의 몇 번째일.
								DAY_OF_YEAR		그 해의 몇 번째일.
								DAY_OF_WEKK		요일. (1~7 1=일요일)
								
								시간관련.
								HOUR			시간.(0~11)
								HOUR_OF_DAY		시간.(0~23)
								MINUTE			분.
								SECOND			초.
								MILLISECOND		천분의 일초.
								ZONE_OFFSET		GMT기준 시차. (한국 + 9)
								AM_PM			오전/오후.


# Calendar 클래스2.

set()		날짜와 시간지정하기.
			매개변수로 년,월,일,시,분,초를 넣을 수 있다.
			(중요)월을 set할때는 -1 해줘야된다. (배열을 이용하기 때문에 0부터 시작한다)
			두 시간을 비교할때는 getTimeInMillie() 사용후 (값1 - 값2)/1000을 해주면 초 단위를 얻을 수 있다.

			날짜 지정하는 방법.
			
			1. Calendar date1 = Calendar.getInstance();
			   date1.set(2017,7,15);                       2017년 8월 15일.
			   
			2. date1.set(Calendar.YEAR, 2017);			   2017년.
			   date1.set(Calendar.MONTH, 7);		       8월.
			   date1.set(Calendar.DATE, 15);               15일.
			
			시간 지정하는 방법.
			
			Calendar time1 = Calendar.getInstance();
			time1.set(Calendar.HOUR_OF_DAY, 16);			16시.
			time1.set(Calendar.MINUTE, 20);					20분.	
			time1.set(Calendar.SECOND, 47);					47초.
			

# Calendar 클래스3.

clear()		Calendar 객체의 모든 필드를 초기화한다.
			Calendar의 초기값은 지금시간이다. 
			clear하면 1970.1월.1일.00:00:00으로 지정된다. EPOCH Time(컴퓨터가 만들어진날)
			ex) dt.clear();

claer(int filed)		특정필드를 초기화하는 방법이다.
						ex) dt.clear(Calendar.SECOND);1
			
getDayDiff(년월일, 년월일) 		두 날짜의 차이를 알려준다.
							비교하는 두 날짜에 clear()를 꼭 해줘야된다. (미세한 초 차이로 값이 달라진다)
							ex) getDayDiff("20210607","20210610");

add()						특정 필드의 값을 증가 또는 감소시킨다. 
							날짜를 크게 바꿔면 월이 달라질 수 있다. (다른 필드의 영향 O)
							ex) date.add(Calendar.DATE, 1);
								date.add(Calendar.MONTH, -8);

roll()						특정 필드의 값을 증가 또는 감소시킨다.
							날짜를 바꿔도 월이 달라지지 않는다. (다른 필드의 영향 X)
							ex) date.roll(Calendar.DATE, 1);
								date.roll(Calendar.MONTH, 5);


# Date와 Calendar간의 변환.

 Calendar를 Date로 변환.
 
Calendar cal = Calendar.getInstance();
            ...
Date d = new Date(cal.getTimeInMillis());


 Date를 Calendar로 변환.
 
Date d = new Date();
      ...
Calendar cal = Calendar.getInstance();
cal.setTime(d);


# 형식화 클래스.

java.text패키지

DecimalFormat			숫자를 원하는 형식으로 바꿔주는 형식화 클래스이다.
						어떤 형식의 문자열에서 숫자로 바꿔주는 역할도 한다.
SimpleDateFormat		날짜를 원하는 형식으로 바꿔주는 형식화 클래스이다.
						어떤 형식의 문자열에서 날짜로 바꿔주는 역할도 한다.
						

# Decimal Format

Decimal Format		

숫자를 형식화할때 사용한다. (숫자 => 형식 문자열)
					
ex) double number = 1234567.89;
	DecimalFormat df = new DecimalFormat("#.#E0");
	String result = df.format(number);
	result = "1.2E6"					
						
형식		0		10진수. (값이 없을 떄는 0)
				ex) 0					123456789
				    0.0					12345678.9
				    000000.0000			123456.8900
	    
	    #		10진수.
	    		ex) #					123456789
					#.#					12345678.9
					######.####			123456.89
		
		E		지수기호.
				#.#E0					1.2E8
				0.0E0					1.2E8
				0.0000E0				1.2345E8
				##.###E0				12.345E7

특정 형식의 문자열을 숫자로 변환할 때도 사용한다. ( 형식 문자열 -> 숫자 )

ex) DecimalFormat df = new DecimalFormat("#,###.##");
	Number num = df.parse("1,234,567.89");
	double d = num.doubleValue();
	
참고사항 Integer.parseInt("number")는 ,가 들어간 문자열을 숫자로 변환하지 못한다.


# SimpleDateFormat

날짜와 시간을 다양한 형식으로 출력.
				
ex) Date today = new Date();
	SimpleDateFormat df = new SimpleDateFormat("yyyy-mm-dd");
	
	String result = df.format(today);
	
특정 형식으로 되어 있는 문자열에서 날짜와 시간을 뽑아낼 수도 있다.

ex) DateFormat df = new SimpleDateFormat("yyyy년 MM월 dd일");
	
	Date d= df.parse("2021년 6월 7일");
	String result = df2.format(d);


# 컬렉션 collection, 프레임웍 framework

컬렉션 			여러 객체(데이터)를 모아 놓은 것을 의미한다.
프레임웍			표준화, 정형화된 체계적인 프로그래밍 방식이다.
				ex) Spring 프레임웍.
			
라이브러리			다른사람이 미리 만들어놓은 기능을 모아놓은 것이다.
				ex) 오디오 라이브러리, 통계 라이브러리 ...


컬렉션프레임웍		컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식이다.
				컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 클래스를 제공한다.
				java.util패키지에 포함. (JDK 1.2부터 표준화 제공)

컬렉션클래스		다수의 데이터를 저장 할 수 있는 클래스 ex) Vector, ArrayList, HashSet...

컬렉션을다룬다		다수의 객체를 저장, 삭제, 검색, 정렬 등을 할 수 있다.


# 컬렉션프레임웍의 핵심 인터페이스.

데이터의 3가지 큰 특성.

1. List  	순서가 있는 데이터의 집합. 데이터의 중복을 허용한다.
		  	구현클래스 - ArrayList, LinkedList, Stack, Vector 등.
		  	ex) 대기자명단.
			
2. Set 		순서를 유지하지 않는 데이터의 집합. 중복을 허용하지 않는다.
			구현클래스 - HashSet, TreeSet 등.
			ex) 양의 정수집합, 소수의 집합.

3. Map 		키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합. 
			순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다.
			구현클래스 - HashMap, TreeMap, Hashtable, Properties 등.
			ex) ID-pwd, 우편번호, 지역번호(전화번호).
			
표준화 이후에 List, Set, Map이 구현클래스 이름에 들어가게 정리하였다.

Collection		Set, List의 공통 부분을 Collection 인터페이스에 담았다.


# Collection 인터페이스의 메소드.

메소드들.
boolean add (Object o)			o 또는 객체들을 Collection에 추가한다.

void clear()					Collection의 모든 객체를 삭제한다.

boolean contains(Object o)		o 또는 객체들이 Collection에 포함되어있는지 확인한다.

boolean isEmpty()				Collection이 비어있는지 확인한다.

iterator iterator()				Collection의 iterator를 얻어서 반환한다.

boolean remove(object o)		지정된 객체를 삭제한다.

boolean removeAll(Collection c)		지정된 Collection에 포함된 객체들을 모두 삭제한다.

boolean retainAll(Collection c) 	지정된 Collection에 포함된 객체만을 남기고 다른 객체들은 삭제한다.
									Collection에 변화가 있으면 true, 없으면 false를 반환한다.
									
int size()						Collection에 저장된 객체의 개수를 반환한다.
Obejct[] toArray()				Collection에 저장된 객체를 객체배열(Object[])로 반환한다.
Object[] toArray(Object[] a)	지정된 배열에 Collection의 객체를 저장해서 반환한다.


# List인터페이스.

List	순서가있고, 중복가능하다.

구현클래스.

Vector클래스				ArrayList랑 거의 같다.
ArrayList클래스			핵심이다.
LinkedList클래스			핵심이다.

메소드. (Collection에 있는 메소드는 따로 안적음)

void add(int index, Object element)		지정된 위치(index)에 객체들을 추가한다. 
	
Object get(int index)					지정된 위치(index)에 있는 객체를 반환한다.				

int indexOf(Object o)					지정된 객체의 위치(index)를 반환한다. (왼쪽부터)

int lastIndexOf(Object o)				지정된 객체의 위치(index)를 반환한다. (오른쪽부터)

ListIterator ListIterator()				List의 객체에 접근할 수 있는 ListIterator를 반환한다.
ListIterator ListIterator(int index)	

Object remove(int index)				지정된 위치(index)에 있는 객체를 삭제하고 삭제된 객체를 반환한다.

Object set(int index, Object element)	지정된 위치(index)에 객체(element)를 저장한다.

void sort(Comparator c)					지정된 비교자(Comparator)로 List를 정렬한다.

List subList(int fromIndex, int toIndex)	지정된범위 fromindex ~ toindex까지에 있는 객체를 반환한다.


# Set인터페이스.

Set		순서가없고, 값의 중복이 없다.

HashSet			핵심이다.
TreeSet			핵심이다.

SortedSet		핵심 X.

Set인터페이스의 메소드는 Collection 인터페이스와 거의 동일.

boolean addAll(Collection C)		합집합.

boolean containsAll(Collection C)	부분집합.

boolean removeAll(Collection C) 	차집합.

boolean retainAll(Collection C) 	교집합.


# Map인터페이스.

Map		순서가 없고, Key는 중복이없고, Value는 중복이 있다.
		Entry	key + Value의 한쌍을 합쳐서 부르는 말이다.

HashMap			핵심이다. (Hashtable이 구버전)
TreeMap			핵심이다.

LinkedHashMap	Linked되서 Map이지만 순서가 있다. (위에 두개보다 덜 중요)


메소드.

void clear()						Map의 모든 객체를 삭제한다.

boolean containsKey(Object key)		key와 일치하는 Map의 key객체가 있는지 확인한다.
boolean containsValue(Object key)	value와 일치하는 Map의 value객체가 있는지 확인한다.

Set entrySet()						Map에 저장되어 있는 key-value쌍을 Map.Entry타입의 객체로 저장한 Set으로 반환.

boolean equals(Object o)			동인한 Map인지 비교한다.

Object get(Object key)				지정한 key객체에 대응하는 value객체를 찾아서 반환한다.

int hashCode()						해시코드를 반환한다.

boolean inEmpty()					Map이 비어있는지 확인한다.

Set keySet()						Map에 저장된 모든 key객체를 반환한다.

void putAll(Map t)					지정된 Map의 모든 key-value객체를 삭제한다.

Object remove(Object key)			지정된 key객체와 일치하는 key-value객체를 삭제한다.

int size()							Map에 저장된 key-value쌍의 개수를 반환한다.

Collection values()					Map에 저장된 모든 value객체를 반환한다.
									(Collection type => 순서와 중복이 어떤결과든 상관없다)


# ArrayList.

ArrayList	ArrayList는 기존의 Vector를 개선한 것으로 구현원리와 기능적으로 거의 동일하다.
			ArrayList와 달리 Vector는 자체적으로 동기화처리가 되어 있다. (ArrayList는 따로 처리해야된다)
			List인터페이스를 구현하므로 저장순서가 유지되고 중복을 허용한다.
			데이터의 저장공간으로 Object배열을 사용한다. 모든 객체를 저장할 수 있다.
			
생성자.

ArrayList()							기본생성자.
ArrayList(Collection C)				컬렉션을 저장. (컬렉션끼리 변환할때 많이 사용)
ArrayList(int initialCapacity)		배열의길이. (공간을 넉넉히 부여한다)

메소드.

boolean add(Object o)						객체를 추가. 성공 true, 실패 false.
void add(int index, Object element)			저장 위치에 객체를 저장.
boolean addAll(Collection C)				컬렉션을 그대로 저장.
boolean addAll(int index, Collection c)		저장 위치에 컬렉션을 저장.
boolean remove(Object o)					객체를 제거. 
Object remove(int index)					위치에 있는 객체를 제거.
boolean removeAll(Collection c)				컬렉션에 있는 객체들을 제거.
void clear()								모든 객체 삭제.
int indexOf(Object o)						객체가 있는지 확인. 인덱스값 반환. 못 찾으면 -1반환.
int lastIndexOf(Object o)					객체가 있는지 확인. 오른쪽부터확인.
boolean contains(Object o)					객체가 있는지 확인. 있으면 true, 없으면 false.
Object get(int index)						인덱스에 있는 객체 읽기.
Object set(int index, Object element)		특정 위치에 있는 객체를 변경.
List subList(int fromIndex, int toIndex)	from~to까지 있는 객체를 뽑아서 새로운 list를 만듬.
Object[] toArray()							ArrayList의 객체배열을 반환.				
Object[] toArray(Object[] a)				
boolean isEmpty()							비어있는지 확인.
void trimToSize()							빈공간 제거.
int size()									저장된 객체의 갯수 확인.


# ArrayList 객체 삭제과정.

객체 삭제과정.

1. 지정한 index값에 있는 객체를 삭제하면 그 index+1의 값부터 한칸씩 shift한다. 
2. 그리고 맨 마지막에 있는 객체는 delete한다.
3. size-1 해준다.

=> 마지막 데이터를 2,3번만 실행한다. 

중간에 객체를 추가하는 것은 많은 연산을 필요로한다.
모든 객체를 지우려면 마지막 객체부터 지우면서 처음으로 가야된다.
객체 추가과정도 같은 방식으로 진행된다.


# 이클립스에서 Sauce를 직접 확인하는 방법.

이클립스에서 class 이름에 마우스 우클릭 + Open Declaration(f3) 누르면 그 class로 가진다.












