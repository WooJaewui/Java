# 열거형 enum.

enum	관련된 상수들을 같이 묶어 놓은 것. 
		순서대로 0,1,2,3의 값을 가지게된다.
		Java는 타입에 안전한 열거형을 제공. => value & type 체크.
		(C언어의 열거형은 value만 체크)
		switch문에서 case에는 상수만 사용한다.
		

# 열거형의 정의와 사용.

열거형 정의.

enum 열거형이름 { 상수1,상수2,상수3 }
상수1 = 0, 상수2 = 1, 상수3 = 2의 값을 가진다.

ex) enum Direction {East, South, West, North}
	
	
	
열거형 타입의 변수를 선언하고 사용하는 방법.

ex ) class Unit{

		int x, y;
		Diretion dir;						변수선언. (상수들 중에서만 사용가능)

		void init(){
			dir = Direction.East;			init()를 하면 dir = East로 초기화. (상수 사용)
		}
	}

열거형 상수의 비교 ==와 compateTo() 사용가능.

ex) dir == Direction.East  					true.
	dir > Direction.West					Error. (비교연산자 사용불가)
 	dir.comparTo(Direction.West) > 0		사용가능. (왼쪽 +, 오른쪽 -, 같으면 0)
	

# Enum class.

Enum		모든 열거형의 조상이다.

메소드

String name()							열거형 상수의 이름을 문자열로 반환.
int ordinal()							열거형 상수가 정의된 순서를 반환. (0부터 시작)
T valueOf(Class<T> enumType,name)		name과 일치하는 열거형 상수를 반환.

static values();						모든 상수를 배열로 반환.
static valueOf();						열거형 상수의 이름을 넣으면, 그 값을 반환한다.


# 열거형에 멤버 추가하기.

불연속적인 열거형 상수의 경우, 원하는 값을 괄호()안에 적는다.

ex) enum Direction {East(1), South(5), ... };

괄호()를 사용하려면 인스턴스 변수와 생성자를 새로 추가해 줘야 된다.

ex) enum Direction{
		East(1), South(5), ...
	
		private final int value;			()안에 들어올 값을 추가한다.
		
		Direction (value){					생성자에 매개변수로 값을 받는다.
			this.value = value;
		}			
		
	}

열거형의 생성자는 묵시적으로 private이므로, 외부에서 객체생성 불가.

정리.

1. 상수(value,value2)처럼 사용하려면 변수와 생성자를 추가해줘야된다.
2. 상수(value,value2)로 상수를 정의한다.
3. 상수변수를 생성해준다. private final 변수이름 value;
4. 생성자에서 value 값을 매개변수로 받고 그 값을 대입시켜준다.
5. 상수를 컨트롤할 다른 메소드를 만들어준다.


# 애너테이션

애너테이션			주석처럼 프로그래밍 언어에 영향을 미치지 않으며, 유용한 정보를 제공.
				프로그램내에 설정정보를 적는 것이다.
					
javadoc.exe		주석을 추출해서 따로 문서를 만들어주는 기능을 한다.
				/** ~~~ */   소스코드 + 문서.
				
애너테이션 ex) @Test                			이 메서드가 테스트 대상임을 테스트 프로그램에게 알린다.
			public void method(){...}		JUnit이라는 테스트 프로그램에게 신호를 보내는 것이다.


# Java에서 제공하는 애너테이션.

@Override

오버라이딩을 올바르게 했는지 컴파일러가 체크하게 한다. (javac.exe)
오버라이딩할 때 메소드이름을 잘 못 적는 실수를 하는 경우가 많다.
오버라이딩할 때는 메소드 선언부 앞에 @override를 붙이자. (오타쳤을때 잡아준다)


@Deprecated

앞으로 사용하지 않을 것을 권장하는 필드나 메소드에 붙인다. (하위호환성 때문에 남겨놓은 것들에 사용)
@Deprecated가 붙은 대상이 사용된 코드를 컴파일하면 경고가 발생한다. (error는 아니다)
ex) Date클래스의 getDate()


@Functionallinterface

함수형 인터페이스에 붙이면, 컴파일러가 올바르게 작성했는지 체크 (javac.exe)
함수형 인터페이스에는 하나의 추상메소드만 가져야 한다는 제약이 있다. 


@SuppressWarnings

컴파일러의 경고메시지가 나타나지 않게 억제한다. 			
괄호()안에 억제하고자하는 경고의 종류를 문자열로 지정. 
이클립스에서는 못느끼고 cmd에서 javac로 파일을 컴파일할때만 변화를 느낄 수 있다.

ex) SuppressWarnings({"unchecked","deprecation",...})
	ArrayList list = new ArrayList();
	list.add(obj);

cmd javac -Xlint 파일명을 통해 경고의 종류를 확인할 수 있다.


# 메타 애너테이션

메타애너테이션		애너테이션을 만들때 사용하는 애너테이션이다.
				java.lang.annotation에 들어가있다.

@Target

애너테이션을 정의할 때, 적용대상 지정에 사용.
애너테이션을 만들때 class, interface 앞에 @를 붙여준다.

ex) @Target({TYPE, FIELD, METHOD, PARAMETER,...})
	public @interface MyAnnotation {}				
	

@Retention

애너테이션이 유지(retention)되는 기간을 지정하는데 사용.
SAURCE				소스파일에만 존재. 클래스파일에는 존재하지 않음. (컴파일 후에 사라짐)
RUNTIME				클래스 파일에 존재. 실행시에 사용가능. 
CLASS				클래스 파일에 존재. 기본값. (거의 사용하지 않는다)

ex)Retention(RetentionPolicy.RUNTIME)


@Documented

javadoc으로 작성한 문서에 포함시키려면 @Documented를 붙인다. (많이 사용되지 않는다)


@Inherited

애너테이션을 자손 클래스에 상속하고자 할 때 사용한다. (많이 사용되지 않는다)

ex) @Inherited
	@SuperAnno
	

@Repeatable

반복해서 붙일 수 있는 애너테이션을 정의할 때 사용한다. (많이 사용되지 않는다)
@Repeatable인 @ToDo를 하나로 묶을 컨테이너 애너테이션도 정의해야된다.


# 애너테이션 직접만들기.

애너테이션을 직접 만들어 쓸 수 있다.
애너테이션의 메소드는 추상 메소드이며, 애너테이션을 적용할 때 지정(순서 X)
또 다른 애너테이션을 정의할 수 있다.

ex)
@interface TestInfo {
	int count();
	String testedBy();
}

@TestInfo( count = 5, testedBy ="테스트"	)


# 애너테이션의 요소.

적용시 값을 지정하지 않으면, 사용될 수 있는 기본값 지정가능. (null 제외)

ex) @interface TestInfo{
		int count() default 1;				{}을 넣으면 안된다.
	
	}

요소가 하나이고 이름이 value일 때는 요소의 이름 생략가능.

ex) @interface TestInfo{
		String value();
	}
	@TestInfo("password");	= @TestInfo(value="password");
	
요소의 타입이 배열인 경우, 괄호{}를 사용해야 된다. (값이 1일때는 {}괄호를 생략할 수 있다. 값이 없을때는 {}괄호를 넣어야된다.)

ex) @interface TestInfo{
		String[] testTools();
	}
	@TestInfo(testTools={"1","5",...}}
	

# 모든 애너테이션의 조상.

Annotation인터페이스		Annotation은 모든 애너테이션의 조상이지만 상속은 불가하다.
						추상메소드들을 가지고 있다. (따로 구현하지 않아도 사용가능)
						
						
# 마커 애너테이션

Marker Annotation		요소가 하나도 정의되지 않은 애너테이션.
						
ex)	@interface Test{}	
	@Test				따로 줄 값은 없지만 표시하는 역할을 한다.


# 애너테이션 요소의 규칙.

요소의 타입은 기본형, String, enum, 애너테이션, Class만 허용됨. (상수 O, default 매소드 X)
괄호()안에 매개변수를 선언할 수 없다.
예외를 선언할 수 없다.
요소를 타입 매개변수로 정의할 수 없다. (지네릭타입)
유효하지 않은 애너테이션은 무시된다. (없는 것처럼 처리하지 않는다)

class.getAnnotation();    클래스에 있는 애노테이션 data를 가져온다.

ex) TestInfo anno = cls.getAnnotation(TestInfo.class);		TestInfo.class 애노테이션 data를 가져온다.


# 프로세스와 쓰레드.

process		실행중인 프로그램. 자원(메모리,CPU,device)과 쓰레드로 구성.
thread		프로세스 내에서 실제 작업을 수행하는 것.
			모든 프로세스는 최소한 하나의 쓰레드를 가지고 있다.
			
프로세스 = 공장 , 쓰레드 = 일꾼.

싱글쓰레드		작업을 하는 쓰레드가 하나인 것.
			작업관리자에서 프로세스에 쓰레드를 확인할 수 있다.

멀티쓰레드		작업을 하는 쓰레드가 여러개인 것.
			일을 효율적으로 한다. (요즘 나오는 거의 모든 프로그램이 멀티쓰레드이다)

새로운 프로세스를 생성하는 것보다 새로운 쓰레드를 생성하는 것이 더 적은 비용이든다.


# 멀티쓰레드의 장단점.

장점		시스템 자원을 보다 효율적으로 사용할 수 있다.
		사용자에 대한 응답성(responseness)이 향상된다.
		작업이 분리되어 코드가 간결해진다.

단점		동기화(synchronization)에 주의해야된다.
		교착상태(dead-lock)가 발생하지 않도록 주의해야 한다. 
		각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.


# 쓰레드의 구현과 실행.

구현방법.

1. Thread클래스를 상속. 

	단일상속이라 다른 클래스를 상속 받을 수 없다.
	Run()를 오버라이딩.

2. Runnable인터페이스를 구현. (better)

	다른 클래스를 상속 받을 수 있다.
	Run()을 오버라이딩.
	

1번 ex)

class MyThread extends Thread{
	public void run(){ 작업내용 }
}

MyThread t1 = new MyThread();		쓰레드생성.
t1.start();							실행.


2번 ex) 

class MyThread2 implements Runnable {
	public void run(){ 작업내용 }
}

Runnable r = new MyThread2();
Thread t2 = new Thread(r);
t2.start();


# 쓰레드의 실행.

1. 쓰레드 생성.
2. start() 호출.


# 쓰레드의 실행순서.

start()를 한다고해서 항상 먼저 실행되는것은 아니다.
OS스케쥴러가 실행순서를 결정한다.


# start()와 run().

start()			start가 새로운 호출스택을 생성해서 run()을 호출한다.
				그 후 제거된다.
run()			새로 생성된 stack(쓰레드)에서 작업을 실행한다.


# main쓰레드.

main쓰레드		main메소드의 코드를 수행하는 쓰레드이다.
				쓰레드는 '사용자 쓰레드'와 '데몬쓰레드' 두 종류가 있다.
				실행중인 사용자 쓰레드가 하나도 없을 때 프로그램은 종료된다.
				

# join().

다른 쓰레드가 끝날때까지 기다리게 한다.

Thread2 th1 = new Thread2();
th1.start();

th1.join();						

th1의 쓰레드가 끝날때까지 main쓰레드가 끝나지 않는다.


# context switching.

context switching 		멀티쓰레드로 작업할때 필요에 따라 다른 스택으로 옮겨가면서 동시에 작업하는 것을 말한다.
						다른 스택을 번갈아가면서 작업하면 작업시간이 조금 더 걸릴 수 있다. (둘 다 쉼없이 작업했을시)


# I/O 블락킹 blocking.

I/O blocking		입출력시 필요에 따라 작업을 중단하는 것을 말한다.
					작업을 효율적으로 사용할 수 있도록 도와준다.
					
ex) 사용자에게 input으로 data를 입력받아야 실행이 가능한 main stack이 있다면, 
	다른 쓰레드(stack)을 만들어서 효율적인 작업을 할 수 있다.


# 쓰레드의 우선순위 priority of thread.

작업의 중요도에 따라 쓰레드의 우선순위를 다르게 하여 특정 쓰레드가 더 많은 작업시간을 갖게 할 수 있다.
최소 1 최대 10까지 있고, 기본값은 5. (JVM)		
실제 윈도우 OS는 32단계로 되어있다.
실행 중인 상태에서도 priority를 변경할 수 있다.

관련 메소드.
int getPriority()			쓰레드의 우선순위를 반환한다.
void setPriority(int p)		쓰레드의 우선순위를 지정한 값으로 변경한다.


# 작업관리자에서 프로세스 우선순위 설정.

세부정보 => 우선순위설정.
프로세스를 껏다키면 우선순위가 리셋된다.


# 쓰레드 그룹 ThreadGroup.

서로 관련된 쓰레드를 그룹으로 묶어서 다루기 위한 것이다.
모든 쓰레드는 반드시 하나의 쓰레드 그룹에 포함되어 있어야 한다.
쓰레드 그룹을 지정하지 않고 생성한 쓰레드는 'main쓰레드 그룹'에 속한다.
자신을 생성한 쓰레드(부모쓰레드)의 그룹과 우선순위를 상속받는다.

관련메소드.

ThreadGroup  getTgreadGroup()						쓰레드 자신이 속한 쓰레드 그룹을 반환한다.
void uncaughtException(Thread t, Throwable e)		처리되지 않은 예외에 의해 쓰레드 그룹의 쓰레드가 실행이 종료되었을 때,
													JVM에 의해 이 메소드가 자동적으로 호출된다.
													(오버라이딩해 놓으면 예외처리를 할 수 있다)

ThreadGroup(String name)
ThreadGroup(ThreadGroup parent, String name)		그룹안에 또다른 그룹을 만듬.

int activeCount()									활성상태에 있는 쓰레드의 수를 반환한다.
int activeGroupCount()								활성상태에 있는 쓰레드 그룹의 수를 반환.

void destroy()										쓰레드 그룹과 하위 쓰레드 그룹까지 모두 삭제한다.
String getName()									쓰레드 그룹의 이름을 반환.















