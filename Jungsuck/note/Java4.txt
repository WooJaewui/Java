# 조건문.

조건문      조건을 만족할때만 {}를 수행. (0~1번)
            if, switch문이 존재한다.

ex) if (score>60){
    System.out.println("합격");             score>60 true면 "합격" 출력.
}         


# 반복문.

반복문      조건을 만족하는 동안 {}를 수행 (0~n번)

int i = 10;
ex) while (i-- > 0 ){
    System.out.println(i);                  i-- > 0이 false가 될때까지 i가 출력.
}


# 제어문.

제어문          반복문과 조건문을 합쳐서 제어문이라고 한다.
                flow control statement



# 조건문에 if문

if (조건식) {
    // 조건식이 true일 때 수행될 문장.
} 

조건식에는 True, false(boolean) 중에 하나가 와야된다.          ex) x < 0 && x > -5
equalsIgnoreCase(ch);                                       IgnoreCase는 대소문자를 무시한다.


# 블럭

{}      여러 문장을 하나로 묶어주는 것.
        

ex) if (score > 60)
    {   <- 블럭의 시작.
            실행할 내용 1.
            실행할 내용 2.
    }   <- 블럭의 끝.

실행할 내용이 1개이면 {}를 생략할 수 있다.

ex) if (score > 60) System.out.prinnln("합격입니다.");


# if - else문.

if (조건식){
    조건식이 true일 때 수행될 문장.
} else {
    조건식이 flase일 때 수행될 문장.
}

조건식이 두개 일때 사용하는 if문.


# if - else if문.

if (조건식1){
    조건식이 true일 때 수행될 문장.
} else if (조건식2) {
    조건식1이 flase이고, 조건식2가 true일 때 수행될 문장.
} else if (조건식3) {
    조건식 1,2가 false이고, 조건식3이 true일 때 수행될 문장.
} else {
    모든 조건식이 false일때 실행될 문장.
}

리팩토링에서 if - else if문을 쓰지 말라고한다. 다른 방법으로 coding 할 수 있으면 그것을 사용해라!


# 중첩 if문.

if (조건식1){
    if (조건식2){
        조건식1, 조건식2가 모두 true일 때 수행될 문장.
    } else {
        조건식1은 true, 조건식2는 flase일 때 수행될 문장.
    }
} else {
    조건식 1이 flase일떄 실행될 문장.
}

중첩 if문에서는 {}를 잘 구분해서 사용해야 된다.


# switch문

처리해야 하는 경우의 수가 많을 때 유용한 조건문. 
조건식의 결과가 boolean이 아니라 정수, 문자열을 가진다.

switch(조건식){
    case 값1 :
                조건식의 결과가 값1과 같을 경우.
                break;
    case 값2 :
                조건식의 결과가 값2와 같을 경우.
                break;
    default :
                조건식의 결과와 일치하는 case문이 없을 때 수행될 문장.
}               

{}안에 있는 문장들은 break 만날때까지 계속 진행한다.
아무것도 일치하는 값이 없으면 default의 문장을 실행한다. (모든 조건식의 값이 case안에 있다면 default 생략가능)


# switch와 if-else-if문의 비교

둘 다 경우의 수가 많을때 사용한다.
switch문은 조건식이 1개여서, 계산을 1번만 하면된다. (조건문이 많을때는 항상 switch문이 효율적이다)
if-else-if문은 조건식이 true,flase로 여러번 계산을 해야된다. (switch문의 제약이 있을때 사용한다)

=> if-else-if를 사용하기전에 switch문으로 사용할 수 있는지 확인해보고 사용한다.


# switch문의 제약조건.

1. switch문의 조건식 결과는 정수 또는 문자열이어야 한다.
2. case문의 값은 정수, 상수(문자 포함), 문자열만 가능하며, 중복되지 않아야 한다. (변수는 안된다)

ex) case '1' :      case ONE :      case "YES" :        ok    (정수, 상수, 문자열 O)
    case num :      case 1.0 :      ...                 error (실수, 변수 X)


# 임의의 정수 만들기.

Math.random()       0.0 <= Math.random() < 1.0까지 숫자를 랜덤으로 반환한다.

m <= x <= n사이의 랜덤숫자 만들기.

m과 n사이의 수의 갯수를 구한다. = z
각 변에 원하는 숫자를 곱한다.           0.0 <= Math.random() < z
각 변을 int형으로 변환한다.               0 <= math.random() < z
각 변에 m을 더해준다.                     m <= math.random() < z + m


# 반복문 for문.

for (int i=1; i<=5; i++){
    system.out.prinln("I can do it.");
}

초기화; 조건식; 증감식      초기화에서는 변수를 대입하고, 조건식은 boolean값을 넣고, 증감식은 i++, i--을 넣어준다.
                          for문 안에서 선언한 i를 for문 밖에서 사용 할 수 없다. (밖에서 선언을 해줘야된다)
                          같은 type의 변수 여러개를 같이 선언해서 사용할 수 있다.
                          초기화, 조건식, 증감식은 모두 생략이 가능하다. (조건식을 생략하면 True로 들어가고 무한반복된다)
                          조건식에 변수를 사용할 수 있다. ex) i <= k


# for문 안에 for문.

for (int i=1; i<=9; i++){
    for (int j=1; j<=9; j++){
        System.out.println(i+"*"+j+"="+(i*j))
    }
    System.out.println();
}

처음 i=1로 들어간 후에 j의 값이 모두 끝난후에 i의 다음값으로 넘어가서 안에 반복문이 시작된다.


# 반복문 while문.

while(조건식){

    조건식의 연산결과가 true인 동안, 반복될 문장들을 적는다.
}

반복횟수를 모를 때 while문을 사용한다.
while문과 for문은 항상 바꿀 수 있다.
조건식에 true를 생략할 수 없다.


# do-while문.

do {
    1번은 실행되고, 밑에 조건식이 true이면 여러번 실행된다.
} while(조건식);

1번은 무조건 실행되고, 2번째부터는 while 조건식에 따라 실행될지 결정된다.


# Break문.

break문     반복문을 벗어날때 사용한다.


# continue문.

continue    자신이 포함된 반복문의 끝으로 이동 - 다음 반복으로 넘어감.

for(int i=1; i<=10; i++){
    if(i%3==0){
        continue;                       // i중에 3의배수를 건너띈다.
    }
    System.out.println(i);              // 결과값에 3의배수가 나오지 않는다. 1,2,4,5,7,8,10;
}


# 이름붙은 반복문.

반복문에 이름을 붙여서 하나 이상의 반복문을 벗어날 수 있다. ( break는 하나의 반복문만 벗어나기 때문에 이런방법이 생겨났다 )

Loop : for(int i=1; i<=5; i++){
            for(int j=1; j<=10; j;;){
                break Loop;                     가장 밖에 있는 Loop 반복문까지 벗어난다.
                break;                          가장 가까이 있는 반복문만 벗어나진다.
            }       

continue Loop; 이것도 가능하지만 거의 사용하지 않기 때문에 알고만 있으면 된다.


# 배열

배열        같은 type의 여러 변수를 하나의 묶음으로 다루는 것. 
참조변수    변수들을 담은 배열의 이름.
index       배열안에 있는 값을 0~n-1까지 숫자로 이름을 붙여주는 것.  

ex) int[] score = int[5];
    score[0]~score[4]까지 사용.

배열은 연속적이다.


# 배열의 선언과 생성.

배열의 선언      배열을 다루기 위한 참조변수의 선언.

1. 타입[] 변수이름;             int[] score        java스타일.      score참조변수가 생성된다.
2. 타입 변수이름[];             int score[]        C언어스타일.     score참조변수가 생성된다.

배열의 생성

변수이름 = new 타입[길이];      score = new long[3]      score[0], score[1], score[2]가 생성된다.

배열의 인덱스

인덱스의 범위는 0부터 '배열길이-1'까지이다.
score[2] = 100;
score[2]의 값 100을 배열의 element(요소)라고 한다.

ex) int A = score[2]    A = 100;            배열의 element는 변수에 대입가능하다.


# 배열의 길이.

배열의 길이(int형상수)      배열이름.length;

ex) int[] arr = new int[5];    
    arr.length;

배열은 한 번 생성하면 실행동안 그 길이를 바꿀 수 없다. (상수와 같은 특성)
배열은 메모리에 연속적으로 위치해야되는데 위치를 정한 후에 더 늘리려고 할때 연속된 메모리를 사용하고 있을 수 있다.
배열의 길이가 부족한 경우 더 큰 배열을 만들어서 옮겨줘야된다.


# 배열의 초기화.

배열의 각 요소(element)에 처음으로 값을 저장하는 것. (값을 저장하지 않으면 0으로 나온다)

1. int[] score = new int[]{50,40,30,20,10};         거의 사용하지 않는다.
2. int[] score = {50,40,30,20,10};                  더 간단한 방법인 이 방법을 많이 사용하고, 두줄은 안된다.

int[] score;
score = {50,40,30,20,10};                           이렇게 사용하면 error가 난다.

int[] score;
score = int[]{50,40,30,20,10};                      두줄로 쓸때는 이런 방식으로 사용해야 된다.