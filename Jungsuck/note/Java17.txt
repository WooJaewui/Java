# 메소드 참조 method reference.

하나의 method만 호출하는 람다식은 'method reference'로 간단히 할 수 있다.

1. static method 참조.			
2. instance method 참조. 		(생성자)


# static method reference.

generics를 통해 type을 알기 때문에 따로 변수를 사용하지 않는다.

ex) Lambda				Function<String, Integer> f = s -> className.methodName(s);
	method reference	Function<String, Integer> f = className::methodName;


# 생성자의 method reference.

매개변수가 없는 경우.

Lambda				Supplier<className> s = () -> new className();
method reference	Supplier<className> s = className::new;

매개변수가 있는 경우.

Lambda				Function<Integer, class> s = (i) -> new className(i);
method reference	Function<Integer, class> s = className::new;
	
배열과 method reference

Lambda				Function<Integer, int[]> f = x -> new int[x];
method reference	Function<Integer, int[]> f = int[]::new;


# 스트림 Stream

Stream		다양한 데이터소스를 표준화된 방법으로 다루기 위한 것이다.
			Collection의 부족한점(Map은 같이 사용할 수 없다)을 보완해서 사용할 수 있다.
			데이터의 연속적인 '흐름'이다. stream.
			
스트림 진행 3단계

1.스트림만들기.
2.중간연산하기.
3.최종연산하기.


# stream의 연산.

중간연산 		연산결과가 스트림인 연산. 반복적으로 적용가능.
최종연산		연산결과가 스트림이 아닌 연산. 단 한번만 적용가능 (스트림의 요소를 소모)
			
ex) stream.중간연산().중간연산().중간연산().최종연산()


# stream의 특징1.

stream은 데이터 소스로부터 데이터를 읽기만할 뿐 변경하지 않는다.

ex) ArrayList list = new ArrayList();
	list.stream();

	ArrayList의 값은 변경없음.


stream은 iterator처럼 일회용이다. (필요하면 다시 stream을 생성해야 함)

ex) stream1.중간().중간().최종().중간();			X	최종연산 후에 추가적인 연산을 할 수 없다.
	list.stream()								작업이 필요하면 새로 stream을 만들어야된다.
	

최종연산 전까지 중간연산이 수행되지 않는다. - 지연된 연산.


# Stream의 특징 2.

Stream은 작업을 내부 반복으로 처리한다. (아직 잘 모르겠다)

Stream의 작업을 병렬로 처리한다. (병렬 stream - multi thread)

기본형 Stream - IntStream, LongStream, DoubleStream.

  - 오토박싱 & 언박싱의 비효율이 제거됨. (성능을 효율적으로 바꿈)
  - 숫자와 관련된 유용한 method를 Stream<t>보다 더 많이 제공.
  	(intStream은 이미 int라는 것을 알기 때문에 숫자와 관련된 좋은 method들이 많이 있다)


# Stream 만들기.

Collection interface의 stream()의로 collection을 stream으로 변환할 수 있다.

ex) List<Integer> list = Arrays.asList(1,2,3,4,5);
	Stream<Integer> intStream = list.stream();

	intStream.forEach(System.out::print);			System.out.print(i)


Stream 배열만들기.

Stream<T> Stream.of(T[])
Stream<T> Arrays.stream(T[])
Stream<T> Arrays.stream(T[], to a, from b)

ex) Stream<String> strStream = Stream.of("a","b","c");
	Stream<String> strStream = Stream.of(new String[]{"a","b","c"});
	Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"});
	Stream<String> strStream = Arrays.stream(new String[]{"a","b"},0,3);


기본형 배열로부터 스트림 생성하기.

IntStream IntStream.of(int... values);
IntStream IntStream.of(int[]);
IntStream Arrays.stream(int[]);


난수(임의의 수) 스트림 만들기.

Random class의 메소드.

Integer.Min_value  <=  ints()    <=   Integer.Max_value
Long.Min_value	   <=  longs()   <=   Long.Max_value
      0.0          <=  doubles() <=   1.0
      

특정 범위의 정수를 요소로 갖는 스트림 생성하기. (IntStream, LongStream)

IntStream.range(int begin, int end)


람다식으로 스트림 만들기. (iterator(), generate())

Stream.iterator(0, n->n+2);
무한 Stream으로 반환된 값에 계속 +2 계산을 한다. (seed로 해서 다음 요소를 계산)

Stream.generate(()->1);
각 요소가 서로 독립적이다. (seed를 사용하지 않는다)


파일과 빈 스트림 만들기.	(참고사항)

Files.list(Path dir)							파일과 관련된 스트림.
Stream<String> Files.lines(Path path)

Stream emptyStream = Stream.empty();			비어있는 스트림.






