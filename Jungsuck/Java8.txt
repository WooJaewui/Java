# 단일 상속 single inheritance

단일상속		Java에서는 단일상속만을 허용한다. (C++은 다중상속 허용)

class TvDVD extends Tv, DVD {}			error.

다중상속에 단점.
2개의 부모에 같은이름에 메소드 있을경우 error발생.


# 다중상속처럼 사용하는 단일상속.

비중이 높은 클래스 하나만 상속관계로하고, 나머지는 포함관계로 한다.


# Object클래스.

Object클래스		부모가 없는 클래스는 compiler가 자동적으로 Object클래스를 부모로 상속시킨다.
				모든 클래스는 Object 클래스 메소드 11개를 상속받는다.
				Object클래스의 메소드 toString(), equlas(Object obj), hashCode()
				
상속계층도			상속관계를 나타내주는 것을 상속계층도라고하는데, 그 최상위(부모)에 Object클래스가 있다.


# 메소드 오버라이딩 overriding.

오버라이딩		상속받은 조상의 메소드를 자신에 맞게 변경하는 것이다.
			조상의 메소드에서 선언부은 그대로 사용하고 구현부(실행내용)을 바꾼다.

ex) class Point2D {
		int x;
		int y;
		
		int sum(){
		
			return x + y;
		}
}
	class Point3D extends Point2D {
		int z;
	
		int sum(){
		
			return x + y + z;
		}
}


# 오버라이딩의 조건.

1. 자식클래스 선언부가 조상클래스의 메소드의 선언부와 일치해야 된다. (반환타입, 메소드이름,매개변수목록)
2. 접근 제어자를 조상 클래스의 메소드보다 좁은 범위로 변경할 수 없다.
3. 예외는 조상 클래스의 메소드보다 많이 선언할 수 없다.


# 오버로딩과 오버라이딩 비교.

오버로딩		이름이 같은 새로운 메소드를 정의하는 것. (new)
오버라이딩		상속받은 메소드의 내용을 변경하는 것. (change, modify)


# 참조변수 super

super		조상의 멤버와 자신의 멤버를 구별할 때 사용한다.
			조상의 변수에 super.x라고 표현한다. 자신의 변수는 this.x.

ex) class Parent {int x = 10;}
	class Child extends Parent {
	
		int x = 20;
		
		void method(){
		
			System.out.println(x);					10
			System.out.println(super.x);			10
			System.out.println(this.x);				20
		}
	}

method에 int x = 20;이 없다면 this.x = super.x가 된다.


# 조상의 생성자 super()

super()		조상의 생성자를 호출할 때 사용.
			조상의 멤버는 조상의 생성자를 호출해서 초기화한다.
					
ex) class Point{

		int x,y;
		
		Point(int x, int y){
			this.x = x;
			this.y = y;
		}
	}

	class Point3D extends Point{
	
		int z;
	
		Point3D (int x, int y, int z){
			super(x,y);
			this.z = z;
		
		}
	}


# 생성자의 중요점.

생성자의 첫 줄에 반드시 생성자를 호출해야 한다. 그렇지 않으면 컴파일러가 생성자의 첫 줄에 super();를 자동삽입.
class에 기본생성자를 넣어주어야 자동생성자 삽입에 의한 error발생을 없앨 수 있다.

ex) Point(){this();}   or  Point(){super();}


# 패키지 (package)

패키지		서로 관련된 클래스의 묶음. Java8 기준 약 4000개의 클래스.
			패키지는 폴더의 역할을 한다.
			클래스는 클래스파일에 넣고, 클래스파일은 패키지에 넣는다. 패키지 안에 패키지를 넣을 수 있다.
			클래스의 실제이름(full name)은 패키지를 포함한다. ex) package1.package2.class
		
rt.jar 		실행할때 필요한 파일을 묶어놓은 것.
			rt = runtime
			jar = 클래스 파일 묶어놓은 것. 압축파일.


# 패키지의 선언.

패키지는 소스파일의 첫 번째 문장으로 단 한 번 선언한다.
같은 소스파일의 클래스들은 모두 같은 패키지에 속하게 된다.
패키지 선언이 없으면 이름없는(unnamed) 패키지에 속하게 된다. 이클립스에서는 default package이다.

class 실행방법.

1. cmd cd bin		
2. cmd java 패키지1.패키지2.클래스


# 클래스패스 classpath

클래스패스 		클래스파일의 위치를 알려주는 경로.
			환경변수 classpath로 관리하며, 경로간의 구분자는 ;를 사용.
			환경변수 값을 바꾸면 cmd창을 새로열어야 적용된다.
			
제어판에 환경변수에 path를 추가해주면 cmd 위치가 어디든지 실행을 할 수 있다.


# import문

import		클래스를 사용할 때 패키지이름을 생략할 수 있다.
			Ctrl + Shift + O 를 누르면 정의되지 않은 클래스를 만들어준다.
			java.lang패키지의 클래스는 import하지 않고도 사용할 수 있다. (기본패키지)
			*은 패키지안에 있는 모든 클래스를 불러오는 것이다. import java.util.*

ex) import java.util.Date;

	class ImportTest{
	
		Date today = new Date();
	}


# import문의 선언.

import 패키지명.클래스명;			원하는클래스만.
import 패키지명.*;				모든클래스.

import문은 패키지문과 클래스선언의 사이에 선언한다.
import문은 컴파일시에 처리되므로 프로그램의 성능에 영향없음. (컴파일 시간에는 영향이 있을 수 있지만 거의 차이가 없다)
패키지는 포함안되고, 클래스만 포함된다. 
패키지가 다르고, 클래스이름이 같은 클래스들을 사용할때는 앞에 패키지까지 적어준다.
ctrl + shift + o를 누르면 자동으로 만들어준다.


# static import문.

static import문 		class안에 static 멤버를 사용할 때 클래스 이름을 생략할 수 있게 해준다.
					class이름까지 생략해서 가독성이 떨어진다. 꼭 필요한 경우에만 사용하자.

ex) import static java.lang.Math.*;			Math클래스의 모든 static멤버를 사용한다.

	Math.random() = random();				스태틱 메소드를 클래스이름을 생략해서 사용할 수 있다.
	Math.PI = PI							스태틱 변수를 클래스이름을 생략해서 사용할 수 있다.
	

# 제어자 modifier.

제어자		클래스와 클래스의멤버에 부가적인 의미 부여. (형용사와 비슷하다)
			하나의 대상에 여러 제어자를 같이 사용할 수 있다. (접근 제어자는 하나만)
			여러개의 제어자를 사용하면 가장먼저 접근제어자를 사용하자. (관례적)
			
접근제어자		public, protected, (default), private 4개중에 하나만 가능하다.
기타			static, final, abstract, native, transient, synchronized


# 기타 제어자.

static 		변수, 메소드 앞에 사용한다. (CV, CM)
			복잡한 초기화에 사용된다.
			static이 붙으면 instance관련된 것들을 사용할 수 없다.
			객체 생성없이 사용가능.
			
final		클래스, 변수, 메소드 앞에 사용한다. 어디에서든지 사용가능.
			final class은 조상이 될 수 없는 클래스이다. 상속계층도에 가장 아래 자손이다 ex) Math,String
			final 변수은 상수이다.
			final 메소드는 오버라이딩 할 수 없는 메소드이다.
	
Math 	클래스는 모두 static멤버를 가지고 있어서 final.
String 	자손을 생성하면 정보를 조작할 수 있기 때문에 final.

abstract	클래스, 메소드 앞에 사용한다.
			abstract class 추상메소드를 가지고 있는 추상클래스이다. 미완성클래스 인스턴스를 만들 수 없다.
			abstract 메소드는 구현부가 없는 메소드이다. 미완성메소드.(추상메소드)
			추상메소드의 구현부를 완성해야 사용가능하다.
			ex) abstract void move();


# 접근제어자 access modifier

접근제어자			4개중에 하나만 사용할 수 있다.
				public class는 sauce에서 한개만 존재할 수 있다.

private			변수, 메소드 앞에 사용가능.
				같은 클래스 내에서만 접근이 가능하다.

default			클래스, 변수, 메소드 앞에 사용가능.
				같은 패키지 내에서만 접근이 가능하다. 생략가능.
				
				
protected		변수, 메소드 앞에 사용가능.
				같은 패키지 내에서, 그리고 다른 패키지의 자손클래스에서 접근이 가능하다.

public			클래스, 변수, 메소드 앞에 사용가능.
				접근 제한이 전혀 없다.


# 캡슐화와 접근제어자.

접근제어자를 사용하는 이유		외부로부터 데이터를 보호하기 위해. 
						외부에서 알 필요가 없는 내부적으로 사용되는 변수를 감춘다.
						variable은 private로 처리.
						method에 여러가지 조건을 통해 변수의 값을 대입할 수 있도록 한다. 
						내부에서만 사용하는 method는 private로 처리한다.

최대한 감출 수 있는 정보는 감춰야 data 보호를 할 수 있다.


# 다형성 polymorphism.

다형성	여러 가지 형태를 가질 수 있는 능력.
		조상 타입 참조 변수로 자손 타입 객체를 다루는 것.
		자손 타입의 참조변수로는 조상 타입의 객체를 가리킬 수 없다.

ex)	부모 class = Tv
	자손 class = SmartTv()
	
	Tv t = new SmartTv();			부모타입 참조변수 = new 자식타입();
	

# 다형성을 통해 만든 인스턴스와, 일반 인스턴스 차이.

ex) 부모 class에 멤버 5개
	자식 class에 멤버 2개일때
	
	SmartTv t1 = new SmartTv();		모든 멤버 7개를 다 사용할 수 있다. (일반 인스턴스)	
	Tv t = new SmartTv(); 			부모 멤버 5개만 사용할 수 있다. (다형성으로 만든 인스턴스)
	
	SmartTv t = new Tv();           자식 타입으로 부모객체를 만들 수 없다. (error)


# 참조변수의 형변환.

기본형의 형변환		값이 바뀐다. ex) 3.6f -> int 3
참조변수의 형변환		사용할 수 있는 멤버의 갯수를 조절하는 것.
				조상 자손 관계의 참조변수는 서로 형변환 가능.
				자손 -> 부모 type 생략가능, 부모 -> 자손 type 생략불가.

ex)	SmartTv t1 = new SmartTv();

	Tv t2 = (SmartTv)t1;				SmartTv인스턴스를 가르키는 t1을 부모type에 참조변수에 대입해서 멤버 5개만 조종할 수 있게 해준다.
										둘 다 하나의 인스턴스를 가르키고 있다.

	SmartTv t3 = (SmartTv)t2;			SmartTv type에 참조변수 t3에 SmartTv를 가르키고있는 t2를 대입해서 SmartTv 인스턴스를 가르킨다.
										t1 = 7개 멤버, t2 = 5개 멤버, t3 = 7개 멤버. 모두 하나의 SmartTv 인스턴스를 가르킨다.

실제 인스턴스가 자손이라면 자손과 조상은 서로 '(type)클래스이름'으로 형변환이 가능하다.
실제 인스턴스가 가장 중요하다!!
data type만 맞으면 compile은 진행된다. 그러나 인스턴스의 멤버보다 type의 멤버가 더 많으면 실행에서 error가 발생한다.





