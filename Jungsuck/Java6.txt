# 클래스와 객체.

class 	클래스란 객체를 정의해 놓은 것.
		클래스의 용도는 객체를 생성하는데 사용한다.

객체		실제로 존재하는 것. 사물 또는 개념.
		객체의 용도는 객체가 가지고 있는 기능과 속성에 따라 다르다.
		
	클래스		객체
   제품설계도		제품
   TV설계도       TV
   붕어빵기계		붕어빵
   
하드웨어(실제세계)를 소프트웨어(컴퓨터안에서)에서 구현하도록 만드는 것.
ex) CD나 테이프로 듣던 노래를 컴퓨터 파일로 만들어서 컴퓨터안에서 실행가능하게되었다.


# 객체의 구성요소.

객체		속성(변수) + 기능(메소드)이다.

ex) class Tv{

	속성
	String color;			tv색상
	boolean power;			전원상태 on/off 	
	int channel;			채널 몇번인지.

	메소드
	void power()			{ power = !power; }	
	void channelUp()        { channel++; }
	void channelDown()      { channel--; } 	
	
}

tv의 설계도이다.


# 객체와 인스턴스.

객체		모든 인스턴스를 대표하는 일반적 용어.
인스턴스	클래스로부터 생성된 객체. ex) Tv class로 만들어진 객체는 Tv인스턴스이다.

클래스 => 인스턴스화 => 인스턴스(객체)


# 클래스 와 객체의 필요성.

클래스가 왜 필요한가?
클래스(설계도)를 통해 쉽게 객체(인스턴스)를 생성하기위해서.

객체가 왜 필요한가?
객체를 사용하기 위해.

객체를 사용한다는 것은?
객체가 가진 속성과 기능을 사용한다는 것이다.


# 클래스의 작성.

하나의 소스파일에 여러 클래스 작성은 보통 하지 않는다.

2개 이상의 클래스가 있을경우.

ex1) Hello2.java(파일명)
	 public class Hello2 {}				public class와 파일명을 같게한다.
		    class Hello3 {}

ex2) Hello3.java(파일명)
     class Hello2 {}					여러개의 class중에 한 개와 파일명을 맞춘다.
     class Hello3 {}					

error 예시.

ex3) Hello2.java(파일명)
	 public class Hello2 {}				public class가 2개이상이면 error가 난다.
	 public class Hello3 {}				public class는 딱 1개여야된다.

ex4) hello2.java(파일명)					대소문자가 틀리면 error가 발생한다.
	 public class Hello2 {}	
	 		class Hello3 {}


# 클래스가 실행되는 원리.

cmd에서 sauce파일 fileName.sauce를 실행해서 object객체를 만드는 형식이 진행되는데,
이클립스에서 이러한 형식을 대신해준다. 
그래서 fileName과 main method가 존재하는 class의 이름이 완전히 같아야된다.


# 객체의 생성.

객체의 생성

클래스명 변수명;
변수명 = new className();
	
ex) Tv t;
	t = new Tv();
	
	Tv t = new Tv();

객체를 다룰려면 참조변수와 className을 알고 있어야된다.


# 객체의 사용.

t.channel = 7;				변수를 사용하는 방법.
t.channelDown();			메소드를 사용하는 방법.

객체를 사용의 순서.

1. 클래스 작성.			설계도작성.
2. 객체생성. 			클래스를 변수에 대입
3. 객체사용. 			변수,메소드


# 객체의 사용 심화.

Tv t; 					Tv클래스 타입(참조형)의 참조변수 t를 선언 
t = new Tv();			Tv인스턴스를 생성한 후, 생성된 Tv인스턴스의 주소를 변수 t에 저장.

변수가 Tv의 리모콘 역활을 하고, 리모콘 없이는 Tv객체를 다룰 수 없다.
리모콘 type Tv t와 새로 만들어진 객체 인스턴스의 new Tv()의 type이 같아야된다.

t.channel = 7; 			Tv class의 속성(변수) channel의 값을 7로 한다.
t.channelDown();		Tv class의 메소드 channelDown()을 실행한다. 
						channelDown을 실행하면 어떤 행동을 할지 class 작성을 할때 정한다.

사용예시1

ex) Tv t1 = new Tv();		Tv(인스턴스)를 t1(변수)에 대입한다.
	Tv t2 = new Tv();		Tv(인스턴스)를 t2(변수)에 대입한다.
	t1.channel = 7;			Tv1 t1의 채널을 7로 한다.

	t2 = t1 				만약에 t2에 t1을 대입하면 
							t2에 대한 리모콘이 사라져서 메모리는 차지하지만 t2 data는 사용할 수 없다.
							불필요한 data(메모리)를 가비지 컬렉터에 의해서 제거해야된다.


Tv를 2개 생성해서 필요에 따라 특성을 바꿔가면서 활용할 수 있다.
ex) 핸드폰을 2개 사서 업무용폰과 개인핸드폰으로 사용할 수 있다.

사용예시2

ex) Tv t1 = new Tv();
	Tv t1 = new Tv();        	하나의 변수로 2개의 class를 대입할 순 없다.
	
	Tv t1 = new Tv();
	Tv t2 = t1;					하나의 class에 2개의 변수는 가능하다.


# 객체 배열. (참조변수배열)

Tv[] tvArr = new Tv[3];         tv1,tv2,tv3

tvArr[0] = new Tv();			리모콘으로 배열의 인덱스 값을 갖는다.
tvArr[1] = new Tv();
tvArr[2] = new Tv();			

Tv[] tvArr = {new Tv(), new Tv(), new Tv()};

배열의 인덱스 값을 리모콘으로 사용한다. (참조변수배열)
꼭 객체를 인덱스에 대입해줘야된다. (많이 틀리는 부분)


# data를 저장하는 방법.

변수		하나의 data를 저장할 수 있는 공간.							ex) 1
배열		같은 종류의 여러 데이터를 하나로 저장할 수 있는 공간.				ex) [1,2,3,4,5]
구조체	서로 관련된 여러 데이터(종류 관계X)를 하나로 저장할 수 있는 공간. 	ex) 1,"Hello",10.0f
함수		명령문 묶음. 함수와 메소드는 같은말이다.	
클래스	데이터와 함수의 결합.(구조체 + 함수)	


# 클래스의 정의.

1. 설계도.
2. 데이터 + 함수.
3. 사용자정의타입.


# 클래스 == 데이터 + 함수.

data를 저장하는 것 + 이 data와 관련된 함수를 같이 저장하는 것이다.


# 클래스 == 사용자 정의 타입.

원하는 type을 직접 만들 수 있다. (참조형 data type)

ex) int hour;						기본변수로 시간 Time을 만들경우.
	int minuts;						각각 따로 저장되어 사용하기가 힘들다.
	int second;
	
	int[] hour = new int[3];		배열로 시간 Time을 만들경우.
	int[] minuts = new int[3];		시간, 분, 초끼리 배열을 만들어야 된다.
	int[] second = new int[3];
	
	class Time{						class로 시간 Time을 만들경우.
		int hour;
		int minuts;
		int second;
	}	
	
class로 작업을 하면 시분초를 한 객체로 만들어서 사용할 수 있고, 쉽고 빠르게 만들 수 있다.
이런식으로 class를 통해 객체를 만들어서 coding하는 것을 객체지향코드라고 한다.


# class의 변수의 종류.

1. 클래스영역.

iv instance variable		인스턴스변수
cv class variable			static + iv = cv (static변수,공유변수)

선언문만 가능하다.
일반적으로 클래스영역이 위에있지만, 따로 순서는 상관없다.
iv, cv는 클래스영역 전체에서 사용된다.
iv는 객체인스턴스가 생성되었을때 만들어진다. (중요)
cv는 클래스가 메모리에 올라갈때 만들어진다. (객체 생성하지 않아도 클래스를 만들면 저장된다)
cv는 아무때나 사용가능. iv는 객체생성을 해야 사용가능.

2. 메소드영역.

lv local variable			지역변수

메소드영역이 아니면 클래스영역이다.
메소드정의만 가능하다.
lv는 메소드가 {시작되고 끝날때까지만} 존재한다. 자동제거.(지역변수의 특징)


# 메소드선언과 정의

메소드선언  	void method()
메소드정의 		메소드의 기능을 설명하는 것.


# CPU의 data를 읽어오는 과정.

SSD/HDD(data저장장치) => 로딩 => ROM/RAM(메모리) => CPU
SSD/HDD(data저장장치) <= Save <= ROM/RAM(메모리)

CPU는 RAM/ROM과 일을 할 수 있다.
SSD/HDD는 RAM/ROM에 data를 올려주는 역할을 한다. (CV의 이해)


# 클래스변수와 인스턴스 변수.

ex)카드 class.

속성(변수) 			무늬, 숫자, 폭, 높이.
인스턴스변수  			무늬, 숫자. (카드마다 달라야 되는 변수)
클래스변수  			폭, 높이 (모든 카드에 같아야 되는 변수)

인스턴스변수 	iv		개별적인 속성. 객체마다 1개씩.	
클래스변수  	cv		공통의 속성. 따로 대입하지 않으면 원래 있던 data를 가진다. 1개로 여러 객체가 공유한다.
					cv값을 따로 대입하면 모든 인스턴스객체의 cv 값이 바뀐다.

사용법.

class Card {
	String kind;
	int number;
	
	static int width = 100;
	static int height = 250;
}

Card c = new Card();
c.kind = "Heart";
c.number = 5;

Card.width = 200;		iv와 구분되기 위해 이런방식으로 사용한다.
Card.height = 300;		


# 메소드

메소드	문장들을 작업단위로 묶어놓은 것.
		중복되는 코드를 묶어서 한개의 메모리로 사용하려고 하는 것.
		값을 받아서 처리하고, 결과를 반환(출력)한다.
		메소드는 class안에 있어야되고, 함수는 어디에서든 존재할 수 있다.
		
ex1) static void printArr(int[] numArr){			메소드 생성
	 for (int i=0; i<10; i++)					메소드에서 실행할 문장1.
		 System.out.prinln(numArr);				메소드에서 실행할 문장2.
}
printArr(); 									메소드 실행.

ex2) int add(int x, int y){						매개변수 x,y
		int result = x + y;
		
		return result;							결과를 반환.
}

위처럼 numArr의 배열을 출력하는 메소드 printArr을 만든 것이다.


# 메소드의 장점.

코드의 중복을 줄일 수 있따.
코드의 관리가 쉽다.
코드를 재사용 할 수 있다.
코드가 간결해서 이해하기 쉬워진다.


# 메소드의 작성.

반복적으로 수행되는 여러 문장을 매소드로 작성.
하나의 메소드는 한 가지 기능만 수행하도록 작성.

메서드 = 선언부 + 구현부

ex) 반환타입 메서드이름 (타입 변수명1, 타입 변수명2, ... ){		타입 변수명을 매개변수라고하고, 0~n개까지 가능.
		
	System.out.println(타입 변수명1)메소드 호출시 수행될 코드.			여기서 나오는 결과가 반환타입으로 나온다.
}															0~1개까지 가능하다.
															여러개의 값을 원하면 배열 or 객체
															void는 반환할게 없다는 뜻이다.


# 메소드의 구현부

지역변수 	매소드 내에 선언된 변수.
		매게변수와 {}안에서 선언된 변수들.
		지역변수는 {}안에 code가 끝나면 제거된다. (외부에 다른 변수이름을 사용할 수 있다)
		

# 메소드의 호출.

메소드이름(값1, 값2, ....)		매개변수(parameter)에 들어갈 값들. 요인argument라고 한다.

int add(int x, int y){

	int result = x + y;
	return result;
}

print99danAll();			void print99danAll()을 호출 void = return 값이 없다.
int result = add(3,5);		add(3,5)메소드의 결과를 result변수에 저장


# 메소드의 실행흐름.

1. 객체인스턴트 생성. 			MyMath mm = new MyMath();
2. 메소드 호출.					mm.add(1L,2L);
3. 메소드 호출값 변수에 넣기.		long adder = mm.add(1L,2L);
4. 호출값 출력.					System.out.prinln(mm.add(1L,2L));


# return문.

실행중인 메소드를 종료하고 호출한 곳으로 되돌아간다.
반환타입이 void가 아닌경우, 반드시 return문이 하나이상 필요하다.
조건문에서 한 조건에만 return을 작성하면 return이 없는 error가 발생한다. 
void method에서 모든 조건에 return값을 사용하지만 않으면 된다. (여러개중 몇개는 return을 써도 된다)
return문이 없으면 void이다.

ex) printGugudan(int dan){

		if(!(2 <= dan && dan <= 9))
			return; 						조건이 충복하지 않으면 호출한 곳으로 돌아간다.
		
		for(int i=1; i<=9; i++)
			return dan*i					조건이 충복했을때 구구단을 호출값으로 갖는다.
			
}

